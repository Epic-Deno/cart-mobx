{"ast":null,"code":"import _initializerDefineProperty from \"/Users/zhangzhen/learns/React/explore/cart-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/zhangzhen/learns/React/explore/cart-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/zhangzhen/learns/React/explore/cart-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor;\n\n/*\n * @Description: Description\n * @Author: ZHANG ZHEN\n * @Date: 2021-05-19 21:36:48\n * @LastEditors: ZHANG ZHEN\n * @LastEditTime: 2021-05-19 23:17:40\n */\nimport { observable, action } from 'mobx';\nlet CartStore = (_dec = action.bound, (_class = class CartStore {\n  // 「 id: 商品id, quantity: 购物车商品数量 」\n  addToCart(product) {\n    console.log('addToCart =>', product, this.items); //1. 判断购物车数量是否已经有该商品\n    //如果有，则让购物车中的商品数量+1\n    //如果没有，则添加新的商品到购物车中\n\n    const prod = this.items.find(cartItem => cartItem.id === product.id); //找到一样的数量就加1\n\n    if (prod) {\n      //购物车存在目标商品\n      prod.quantity++;\n    } else {\n      //购物车没有就把这个参数加到购物车的数组中\n      this.items.shift({\n        id: product['id'],\n        quantity: 1\n      });\n    }\n\n    console.log(this.items);\n  }\n\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"items\", _descriptor, this);\n\n    this.rootStore = rootStore; //便于在当前的store拿到根节点\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"addToCart\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"addToCart\"), _class.prototype)), _class));\nexport default CartStore;","map":{"version":3,"sources":["/Users/zhangzhen/learns/React/explore/cart-mobx/src/store/cart.js"],"names":["observable","action","CartStore","bound","addToCart","product","console","log","items","prod","find","cartItem","id","quantity","shift","constructor","rootStore"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;IAEMC,S,WAIDD,MAAM,CAACE,K,YAJZ,MAAMD,SAAN,CAAgB;AACZ;AAGcE,EAAAA,SAAS,CAAEC,OAAF,EAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,OAA5B,EAAqC,KAAKG,KAA1C,EAD8B,CAE9B;AACA;AACA;;AACA,UAAMC,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBP,OAAO,CAACO,EAApD,CAAb,CAL8B,CAM9B;;AACA,QAAIH,IAAJ,EAAU;AAAE;AACRA,MAAAA,IAAI,CAACI,QAAL;AACH,KAFD,MAEO;AAAE;AACL,WAAKL,KAAL,CAAWM,KAAX,CAAiB;AACbF,QAAAA,EAAE,EAAEP,OAAO,CAAC,IAAD,CADE;AAEbQ,QAAAA,QAAQ,EAAE;AAFG,OAAjB;AAKH;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AAEH;;AAEDO,EAAAA,WAAW,CAAEC,SAAF,EAAa;AAAA;;AACpB,SAAKA,SAAL,GAAiBA,SAAjB,CADoB,CACO;AAC9B;;AA1BW,C,uEAEXhB,U;;;;;WAAmB,E;;;AA2BxB,eAAeE,SAAf","sourcesContent":["/*\n * @Description: Description\n * @Author: ZHANG ZHEN\n * @Date: 2021-05-19 21:36:48\n * @LastEditors: ZHANG ZHEN\n * @LastEditTime: 2021-05-19 23:17:40\n */\nimport { observable, action } from 'mobx'\n\nclass CartStore {\n    // 「 id: 商品id, quantity: 购物车商品数量 」\n    @observable items = [];\n    \n    @action.bound addToCart (product) {\n        console.log('addToCart =>', product, this.items)\n        //1. 判断购物车数量是否已经有该商品\n        //如果有，则让购物车中的商品数量+1\n        //如果没有，则添加新的商品到购物车中\n        const prod = this.items.find(cartItem => cartItem.id === product.id);\n        //找到一样的数量就加1\n        if (prod) { //购物车存在目标商品\n            prod.quantity++;\n        } else { //购物车没有就把这个参数加到购物车的数组中\n            this.items.shift({\n                id: product['id'],\n                quantity: 1\n            });\n\n        }\n        console.log(this.items)\n        \n    }\n    \n    constructor (rootStore) {\n        this.rootStore = rootStore;//便于在当前的store拿到根节点\n    }\n}\n\nexport default CartStore;"]},"metadata":{},"sourceType":"module"}