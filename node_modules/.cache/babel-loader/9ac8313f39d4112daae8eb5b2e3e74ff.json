{"ast":null,"code":"import _initializerDefineProperty from \"/Users/zhangzhen/learns/React/explore/cart-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/zhangzhen/learns/React/explore/cart-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/zhangzhen/learns/React/explore/cart-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2;\n\n/*\n * @Description: Description\n * @Author: ZHANG ZHEN\n * @Date: 2021-05-19 21:36:48\n * @LastEditors: ZHANG ZHEN\n * @LastEditTime: 2021-05-25 23:43:55\n */\nimport { observable, action, computed } from 'mobx';\nimport * as shop from '../api/shop';\nlet CartStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, (_class = class CartStore {\n  // 「 id: 商品id, quantity: 购物车商品数量 」\n  addToCart(product) {\n    // console.log('addToCart =>', product['id'], this.items)\n    //1. 判断购物车数量是否已经有该商品\n    //如果有，则让购物车中的商品数量+1\n    //如果没有，则添加新的商品到购物车中\n    const prod = this.items.find(cartItem => cartItem.id === product.id); //找到一样的数量就加1\n\n    if (prod) {\n      //购物车存在目标商品\n      prod.quantity++;\n    } else {\n      //购物车没有就把这个参数加到购物车的数组中\n      this.items.push({\n        id: product['id'],\n        quantity: 1\n      });\n    } //添加购物车之后，列表库存 -1\n\n\n    this.rootStore.productsStore.decrementInventory(product);\n  }\n\n  get cartProducts() {\n    const {\n      productsStore\n    } = this.rootStore;\n    return this.items.map(cartItem => {\n      const prod = productsStore['all'].find(prodItem => prodItem.id === cartItem.id); //    if (prod) {\n\n      return {\n        id: prod['id'],\n        price: prod['price'],\n        title: prod['title'],\n        quantity: cartItem['quantity'] //当前添加的数量\n\n      }; //    }\n    });\n  }\n\n  get totalPrice() {\n    // reduce 一个参数是用来累加的 第二个是每个Item, 接受一个函数， 第二个参数是初始值\n    return this.cartProducts.reduce((total, prod) => {\n      return total + prod.price * prod.quantity;\n    }, 0);\n  } //结算\n\n\n  checkout(products) {\n    //备份购物车数据\n    const savedProducts = [...products]; //清空结算状态\n\n    this.setCheckoutStatus(null); //清空购物车\n\n    this.setItems([]); //发起结算请求\n    // 如果成功： 将结算状态设置成successful\n    // 如果发起失败： 将结算状态设置为 failed, 还原购物车数据\n\n    console.log('checkout => ', products);\n  }\n\n  setCheckoutStatus(status) {\n    this.checkoutStatus = status;\n  }\n\n  setItems(items) {\n    this.items = items;\n  }\n\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"items\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"checkoutStatus\", _descriptor2, this);\n\n    this.rootStore = rootStore; //便于在当前的store拿到根节点\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"checkoutStatus\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"addToCart\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"addToCart\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cartProducts\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"cartProducts\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"totalPrice\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"totalPrice\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"checkout\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"checkout\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setCheckoutStatus\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"setCheckoutStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setItems\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"setItems\"), _class.prototype)), _class));\nexport default CartStore;","map":{"version":3,"sources":["/Users/zhangzhen/learns/React/explore/cart-mobx/src/store/cart.js"],"names":["observable","action","computed","shop","CartStore","bound","addToCart","product","prod","items","find","cartItem","id","quantity","push","rootStore","productsStore","decrementInventory","cartProducts","map","prodItem","price","title","totalPrice","reduce","total","checkout","products","savedProducts","setCheckoutStatus","setItems","console","log","status","checkoutStatus","constructor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,MAA7C;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;IACMC,S,WAMDH,MAAM,CAACI,K,UA4CPJ,MAAM,CAACI,K,UAaPJ,MAAM,CAACI,K,UAIPJ,MAAM,CAACI,K,YAnEZ,MAAMD,SAAN,CAAgB;AACZ;AAKcE,EAAAA,SAAS,CAAEC,OAAF,EAAW;AAC9B;AACA;AACA;AACA;AACA,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBL,OAAO,CAACK,EAApD,CAAb,CAL8B,CAM9B;;AACA,QAAIJ,IAAJ,EAAU;AAAE;AACRA,MAAAA,IAAI,CAACK,QAAL;AACH,KAFD,MAEO;AAAE;AACL,WAAKJ,KAAL,CAAWK,IAAX,CAAgB;AACZF,QAAAA,EAAE,EAAEL,OAAO,CAAC,IAAD,CADC;AAEZM,QAAAA,QAAQ,EAAE;AAFE,OAAhB;AAKH,KAf6B,CAgB9B;;;AACA,SAAKE,SAAL,CAAeC,aAAf,CAA6BC,kBAA7B,CAAgDV,OAAhD;AAEH;;AAEyB,MAAZW,YAAY,GAAI;AAC1B,UAAM;AAAEF,MAAAA;AAAF,QAAoB,KAAKD,SAA/B;AACA,WAAO,KAAKN,KAAL,CAAWU,GAAX,CAAeR,QAAQ,IAAI;AAC/B,YAAMH,IAAI,GAAGQ,aAAa,CAAC,KAAD,CAAb,CAAqBN,IAArB,CAA0BU,QAAQ,IAAIA,QAAQ,CAACR,EAAT,KAAgBD,QAAQ,CAACC,EAA/D,CAAb,CAD+B,CAElC;;AACO,aAAO;AACHA,QAAAA,EAAE,EAAEJ,IAAI,CAAC,IAAD,CADL;AAEHa,QAAAA,KAAK,EAAEb,IAAI,CAAC,OAAD,CAFR;AAGHc,QAAAA,KAAK,EAAEd,IAAI,CAAC,OAAD,CAHR;AAIHK,QAAAA,QAAQ,EAAEF,QAAQ,CAAC,UAAD,CAJf,CAI4B;;AAJ5B,OAAP,CAH2B,CASlC;AACC,KAVM,CAAP;AAWH;;AAEuB,MAAVY,UAAU,GAAI;AACzB;AACC,WAAO,KAAKL,YAAL,CAAkBM,MAAlB,CAAyB,CAACC,KAAD,EAAQjB,IAAR,KAAiB;AAC7C,aAAOiB,KAAK,GAAGjB,IAAI,CAACa,KAAL,GAAab,IAAI,CAACK,QAAjC;AACH,KAFM,EAEJ,CAFI,CAAP;AAGH,GA/CW,CAiDZ;;;AACca,EAAAA,QAAQ,CAAEC,QAAF,EAAY;AAC9B;AACA,UAAMC,aAAa,GAAG,CAAC,GAAGD,QAAJ,CAAtB,CAF8B,CAG9B;;AACA,SAAKE,iBAAL,CAAuB,IAAvB,EAJ8B,CAK9B;;AACA,SAAKC,QAAL,CAAc,EAAd,EAN8B,CAO9B;AACA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,QAA5B;AACH;;AAEaE,EAAAA,iBAAiB,CAAEI,MAAF,EAAU;AACrC,SAAKC,cAAL,GAAsBD,MAAtB;AACH;;AAEaH,EAAAA,QAAQ,CAAErB,KAAF,EAAS;AAC3B,SAAKA,KAAL,GAAaA,KAAb;AACH;;AACD0B,EAAAA,WAAW,CAAEpB,SAAF,EAAa;AAAA;;AAAA;;AACpB,SAAKA,SAAL,GAAiBA,SAAjB,CADoB,CACO;AAC9B;;AAxEW,C,uEAEXf,U;;;;;WAAmB,E;;kFAEnBA,U;;;;;WAA4B,I;;qNAuB5BE,Q,oJAeAA,Q;AAiCL,eAAeE,SAAf","sourcesContent":["/*\n * @Description: Description\n * @Author: ZHANG ZHEN\n * @Date: 2021-05-19 21:36:48\n * @LastEditors: ZHANG ZHEN\n * @LastEditTime: 2021-05-25 23:43:55\n */\nimport { observable, action, computed } from 'mobx'\nimport * as shop from '../api/shop';\nclass CartStore {\n    // 「 id: 商品id, quantity: 购物车商品数量 」\n    @observable items = [];\n    \n    @observable checkoutStatus = null;\n\n    @action.bound addToCart (product) {\n        // console.log('addToCart =>', product['id'], this.items)\n        //1. 判断购物车数量是否已经有该商品\n        //如果有，则让购物车中的商品数量+1\n        //如果没有，则添加新的商品到购物车中\n        const prod = this.items.find(cartItem => cartItem.id === product.id);\n        //找到一样的数量就加1\n        if (prod) { //购物车存在目标商品\n            prod.quantity++;\n        } else { //购物车没有就把这个参数加到购物车的数组中\n            this.items.push({\n                id: product['id'],\n                quantity: 1,\n            });\n\n        }\n        //添加购物车之后，列表库存 -1\n        this.rootStore.productsStore.decrementInventory(product)\n        \n    }\n\n    @computed get cartProducts () {\n        const { productsStore } = this.rootStore\n        return this.items.map(cartItem => {\n           const prod = productsStore['all'].find(prodItem => prodItem.id === cartItem.id);\n        //    if (prod) {\n               return {\n                   id: prod['id'],\n                   price: prod['price'],\n                   title: prod['title'],\n                   quantity: cartItem['quantity'],//当前添加的数量\n               }\n        //    }\n        })\n    }\n    \n    @computed get totalPrice () {\n       // reduce 一个参数是用来累加的 第二个是每个Item, 接受一个函数， 第二个参数是初始值\n        return this.cartProducts.reduce((total, prod) => {\n            return total + prod.price * prod.quantity;\n        }, 0)\n    }\n\n    //结算\n    @action.bound checkout (products) {\n        //备份购物车数据\n        const savedProducts = [...products];\n        //清空结算状态\n        this.setCheckoutStatus(null);\n        //清空购物车\n        this.setItems([]);\n        //发起结算请求\n        // 如果成功： 将结算状态设置成successful\n        // 如果发起失败： 将结算状态设置为 failed, 还原购物车数据\n        console.log('checkout => ', products)\n    };\n\n    @action.bound setCheckoutStatus (status) {\n        this.checkoutStatus = status;\n    }\n\n    @action.bound setItems (items) {\n        this.items = items\n    }\n    constructor (rootStore) {\n        this.rootStore = rootStore;//便于在当前的store拿到根节点\n    }\n}\n\nexport default CartStore;"]},"metadata":{},"sourceType":"module"}